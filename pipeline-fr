GNU Taler via sandcastle-ng. Git
    Sur un ordinateur linux/debian
        Lancer un terminal
            Ouvrez le menu des applications
            Chercher l'application terminal
            Cliquer sur l'icone de l'application terminal
        Dans le terminal
            Installer podman et vim
                apt install podman vim
            Créer un dossier de travail
                cd ~
                mkdir GNU_TALER-DEMO
                cd GNU_TALER_DEMO
            Telecharger le repertoire git du projet sandcastle-ng
                git clone https://git.taler.net/sandcastle-ng.git
            Entrer dans le répertoire
                cd sandcastle-ng
            Vérifier les composants, c'est à dire les fichiers .tag, afin de s'assurer que chaque fichier contient la version à construire
                Trouver le bon tag git
                    TODO
                Vérifier que les tags sont correctements enregistrés dans chaque composant
                    Entrer dans le répertoire sandcastle-ng/buildconfig
                        cd buildconfig
                    Lister les composants nécessitant un "tag"
                        ls -l *tag
                    Vérifier que chaque composant dispose d'un tag
                        Afficher automatiquement le contenu de tous les fichiers .tag
                            XOR
                                utiliser l'utilitaire standard find pour afficher le contenu de chaque fichier
                                    find . -type f -name "*.tag" -exec sh -c 'echo "==== {} ===="; cat {}' \;
                                executer le script print-latest-versions
                                    cd .. # buildconfig
                                    ./print-latest-versions
                                executer le script print-component-versions
                                    ./print-component-versions
                            A FAIRE, comprendre la différence entre print-component-versions et print-latest-versions
                        Vérifier que chaque fichier .tag contient uniquement un numéro de version (tag) sous la forme vX.Y.Z
            Construire le projet
                Revenir à la racine du projet
                    cd .. # sandcastle.ng
                Executer la commande de création pour lancer la compilation
                    ./sandcastle-build # Cette commande a créer une image de conteneur nommée "taler-base-all"
                    Patienter un long moment le temps que la compilation de tous les composants de GNU TALER se termine et que le container soit créé
                Vérifier la création du container "taler-base-all"
                    podman images # localhost/taler-base-all  latest ...other informations...  3.32 GB
            Configurer le déploiement du projet
                Modifier les scripts de configuration
                    Éditer scripts/demo/setup-sandcastle.sh pour définir la devise utilisée par Taler dans votre déploiement
                        Ouvrir le fichier de configuration setup-sandcastle.sh
                            vim scripts/demo/setup-sandcastle.sh
                        Modifier le nom de la monnaie utilisée
                            AVERTISSEMENT : en cas de difficulté, appuyer sur "Echap" puis sur le caractère ":", puis entrer les deux caractères suivants "q!". Cela aura pour effet de fermer le script en cours sans apporter de modification. Vous pouvez ensuite relancer la commande "vim scripts/demo/setup-sandcastle.sh" pour recommencer avec le fichier par défaut. Si le code est dans un état imparfait n'appuyez jamais sur "Echap" puis ":w" car cela sauvegarderait l'état imparfait.
                            taper le caractère "/" 1 fois puis le mot "CURRENCY" puis la touche Entrée # pour atteindre l'option à modifier pour changer le nom de la monnaie
                            taper le caractère "w" 4 fois # atteindre le mot KUDOS qui est la monnaie par défaut
                            taper le caractère "x" 5 fois # pour effacer le mot KUDOS
                            taper le caractère "i" # pour pouvoir écrire dans le script
                            taper le nom de votre monnaie, en Majuscule pour garder le même style que le code original
                            taper le caractère "Echap" pour quiter le mode écriture
                            taper le caractère ":" puis les trois caractères ":wq" pour sauvegarder et refermer le fichier
                    (Optionel) Ajustez le script sandcastle-run pour configurer les ports qui seront "ouverts" sur l'hôte.
                        Ouvrir le fichier de configuration sandcastle-build
                            vim sandcastle-run
                        Configurer les ports "ouverts" sur l'hôte
                            AVERTISSEMENT : en cas de difficulté, appuyer sur "Echap" puis sur le caractère ":", puis entrer les deux caractères suivants "q!". Cela aura pour effet de fermer le script en cours sans apporter de modification. Vous pouvez ensuite relancer la commande "vim scripts/demo/setup-sandcastle.sh" pour recommencer avec le fichier par défaut. Si le code est dans un état imparfait n'appuyez jamais sur "Echap" puis ":w" car cela sauvegarderait l'état imparfait.
                            taper le caractère "/" 1 fois puis taper la chaine de caractère "PORT_INTERNAL" puis la touche Entrée # pour atteindre la première ligne contenant un port à modifier
                            7 étapes à refaire 7 fois chacune
                                taper le caractère "$" 1 fois # pour atteindre  la fin de la ligne
                                taper le caractère "b" 1 fois # pour atteindre le début du numéro de port à modifier
                                taper le caractère "x" 4 fois # pour effacer le port à modifier
                                taper le caractère "i" # pour pouvoir écrire dans le script
                                taper le nouveau numéro de port
                                taper le caractère "Echap" pour quiter le mode écriture
                                taper le caractère "n" pour atteindre la prochaine ligne contenant un port à modifier
                                (GOTO : "7 étapes à refaire 7 fois chacune"
                            Taper le caractère ":" puis les trois caractères ":wq" pour sauvegarder et refermer le fichier
            Lancer le déploiement        
                Exécuter le container "taler-base-all"
                    ./sandcastle-run -d # l'option -d permet de lancer le conteneur en arrière-plan.
                Vérifier que tout s'est bien passé
                    ls scripts/demo/setup-sandcastle.sh
                    journalctl -u setup-sandcastle.service
                    A FAIRE, déterminer l'usage de sandcastle-logs
            Tester techniquement le déploiement
                Vérifier la bonne execution du déploiement
                    podman ps # localhost/taler-base-all:latest ...other information... 127.0.0.1:16000->8301/tcp, 127.0.0.1:16001->8201/tcp, 127.0.0.1:16002-16003->8502-8503/tcp, 127.0.0.1:16005->8501/tcp, 127.0.0.1:16007->8080/tcp, 127.0.0.1:16009->8505/tcp  taler-sandcastle
                Vérifier les mappages de ports
                    podman port taler-sandcastle # Affiche les 7 ports "remappés" depuis le port d'entrée de la requête vers le port interne au containeur sur 127.0.0.1
                (Optionnel) Entrer dans le container
                    XOR
                        ./sandcastle-enter # donne accès à un shell à l'intérieur du conteneur
                        podman exec -it taler-sandcastle /bin/bash # donne accès à un shell à l'intérieur du conteneur
                    Une fois dans le container
                        Tester les ports IPV4 et IPV6 ouverts
                            netstat -tuln
                            Pour chaque des 7 ports normalement ouverts à ce stade, tester s'il y a une interface web associée
                                curl localhost:2019 # IPV4 - 404 not found
                                curl localhost:5432 # IPV4 - Postgresql, empty reply from webserver
                                curl localhost:8505 # IPV6 - Bank single page application
                                curl localhost:8301 # IPV6 - None
                                curl localhost:8021 # IPV6 - None
                                curl localhost:8080 # IPV6 - None
                        Inspecter les données
                            podman volume inspect talerdata
            Tester fonctionnellement le déploiement
                TODO
                Tester le provisionnement
                    Lister les scripts de provisionnement
            Arrêter le déploiement
                podman stop taler-sandcastle
            Redémarrer le déploiement
                podman start taler-sandcastle
